#!/bin/sh

ULA_PREFIX='dead:2333:6666::/48'
[ -f /etc/jarao/flag ] && ULA_PREFIX=''

uci set network.globals.ula_prefix="$ULA_PREFIX"
uci commit network

uci set luci.main.mediaurlbase='/luci-static/argon'
uci commit luci

if [ "$(opkg list | grep luci-app-passwall)" != "" ]; then
	# Add Passwall rules
	uci set passwall.PCR=shunt_rules
	uci set passwall.PCR.remarks="公主连结日服"
	uci set passwall.PCR.domain_list="api-priconne-redive.cygames.jp"
	uci set passwall.BILIBILI=shunt_rules
	uci set passwall.BILIBILI.remarks="哔哩哔哩动画"
	uci set passwall.BILIBILI.domain_list="bilibili.com
biliapi.net
bilivideo.com
bilivideo.cn"
	uci set passwall.UMA=shunt_rules
	uci set passwall.UMA.remarks="赛马娘"
	uci set passwall.UMA.domain_list="api-umamusume.cygames.jp"
	uci commit passwall
fi

# Set allsign crontab
if [ -f /etc/config/allsign ]; then
	cangku=$(uci get allsign.cangku.cron)
	gmgard=$(uci get allsign.gmgard.cron)
	faq=$(uci get allsign.faq.cron)
	chmod +x /root/cangku.sh
	chmod +x /root/gmgard.sh
	chmod +x /root/FAQ.sh
	echo "$cangku" >>/etc/crontabs/root
	echo "$gmgard" >>/etc/crontabs/root
	echo "$faq" >>/etc/crontabs/root
fi

# Enable IPv6
uci set dhcp.@dnsmasq[0].filter_aaaa='0'
uci commit dhcp

# Enable Vim xterm & mouse copy/paste
echo "export TERM=xterm" >>/etc/profile
sed -i "s/mouse=a/mouse=r/g" /usr/share/vim/vim*/defaults.vim

# Open HTTP and HTTPS port, reset nginx
# if [ "$(opkg list | grep luci-.*nginx)" != "" ]; then
# 	uci add firewall rule
# 	uci set firewall.@rule[-1].target='ACCEPT'
# 	uci set firewall.@rule[-1].src='wan'
# 	uci set firewall.@rule[-1].proto='tcp'
# 	uci set firewall.@rule[-1].dest_port='443'
# 	uci set firewall.@rule[-1].name='HTTPS'
# 	[ -f /etc/jarao/flag ] && uci set firewall.@rule[-1].family='ipv6'

# 	uci add firewall rule
# 	uci set firewall.@rule[-1].target='ACCEPT'
# 	uci set firewall.@rule[-1].src='wan'
# 	uci set firewall.@rule[-1].proto='tcp'
# 	uci set firewall.@rule[-1].dest_port='80'
# 	uci set firewall.@rule[-1].name='HTTP'
# 	[ -f /etc/jarao/flag ] && uci set firewall.@rule[-1].family='ipv6'
	
# 	uci commit firewall

# 	cat >/etc/init.d/nginx <<EOF
# #!/bin/sh /etc/rc.common

# START=80

# start() {
#         [ -d /var/log/nginx ] || mkdir -p /var/log/nginx
#         [ -d /var/lib/nginx ] || mkdir -p /var/lib/nginx
#         [ -f /var/run/nginx.pid ] || touch /var/run/nginx.pid
#         nginx -c /etc/nginx/nginx.conf
# }

# stop() {
#         [ -f /var/run/nginx.pid ] && nginx -s stop
# }

# reload() {
#         nginx -s reload
# }

# EOF

# 	sed -i "/nginx/d" /etc/crontabs/root
# 	rm -f /etc/nginx/conf.d/_redirect2ssl.conf
# 	if [ ! -f /etc/jarao/flag ]; then
# 		rm -rf /etc/nginx/conf.d/*conf
# 		touch /etc/nginx/conf.d/_lan.conf
# 		cat >/etc/nginx/conf.d/_lan.conf <<EOF
# # default_server for the LAN addresses getting the IPs by:
# # ifstatus lan | jsonfilter -e '@["ipv4-address","ipv6-address"].*.address'
# server {
# 	listen 80;
# 	listen [::]:80;
# 	server_name localhost;
# 	index nginx.html index.html index.htm index.php default.html default.htm default.php;
# 	root  /www;
# 	client_max_body_size 300M;
# 	include conf.d/*.locations;

# 	location ~* 		\.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
# 		expires 30d;
# 	}

# 	location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
# 		add_header Access-Control-Allow-Origin "*";
# 		expires 30d;
# 	}

# 	# location ~ /\.(?!well-known) {
# 	# 	deny all;
# 	# }
# }
# EOF

# 		cat >/etc/nginx/conf.d/luci.locations <<EOF
# location /cgi-bin/luci {
# 		index  index.html;
# 		include uwsgi_params;
# 		uwsgi_param SERVER_ADDR \$server_addr;
# 		uwsgi_modifier1 9;
# 		uwsgi_pass unix:////var/run/luci-webui.socket;
# }
# location ~ /cgi-bin/cgi-(backup|download|upload|exec) {
# 		include uwsgi_params;
# 		uwsgi_param SERVER_ADDR \$server_addr';
# 		uwsgi_modifier1 9;
# 		uwsgi_pass unix:////var/run/luci-cgi_io.socket;
# }

# location /luci-static {
# 		error_log stderr crit;
# }

# location /ubus {
#         ubus_interpreter;
#         ubus_socket_path /var/run/ubus.sock;
#         ubus_parallel_req 2;
# }
# EOF
# 	fi
# 	/etc/init.d/nginx enable && /etc/init.d/nginx restart
# fi
